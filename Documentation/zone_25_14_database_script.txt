üî• Zone 25-14 ‚Äì Full Database Creation Script
This script sets up the entire database, including all tables, relationships, constraints, and default values.

üöÄ Database Setup & Extensions

-- Create the Database
CREATE DATABASE zone25_14;
\c zone25_14;

-- Enable necessary PostgreSQL extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

üõ†Ô∏è User System (Roles & Levels Combined)

CREATE TABLE user_roles_levels (
    role_level_id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    required_points INTEGER DEFAULT 0,
    discount_percentage DECIMAL(5,2) DEFAULT 0.00,
    is_staff BOOLEAN DEFAULT FALSE
);

-- Insert Default Roles & Levels
INSERT INTO user_roles_levels (name, required_points, discount_percentage, is_staff)
VALUES 
('Explorer', 0, 0.00, FALSE),
('Supporter', 500, 5.00, FALSE),
('Elite Member', 1500, 10.00, FALSE),
('Legend', 3000, 15.00, FALSE),
('Ultimate', 5000, 20.00, FALSE),
('Moderator', 0, 25.00, TRUE),
('Store Chief', 0, 30.00, TRUE),
('Hype Lead', 0, 30.00, TRUE),
('Founder', 0, 30.00, TRUE);

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    biography TEXT,
    profile_picture TEXT,
    role_level_id INTEGER REFERENCES user_roles_levels(role_level_id) DEFAULT 1,
    store_credit DECIMAL(10,2) DEFAULT 0 -- For gift cards and rewards
);

üîó Linked Accounts System

CREATE TABLE linked_accounts (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    platform VARCHAR(50) NOT NULL,
    username VARCHAR(255) NOT NULL,
    profile_url TEXT NOT NULL,
    linked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

üõçÔ∏è E-Commerce System

CREATE TABLE brands (
    brand_id SERIAL PRIMARY KEY,
    brand_name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT
);

CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    brand_id INTEGER REFERENCES brands(brand_id),
    name VARCHAR(100) NOT NULL,
    parent_category_id INTEGER REFERENCES categories(category_id),
    path TEXT
);

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    brand_id INTEGER REFERENCES brands(brand_id),
    category_id INTEGER REFERENCES categories(category_id),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INTEGER NOT NULL DEFAULT 0,
    is_exclusive BOOLEAN DEFAULT FALSE
);

CREATE TABLE product_images (
    image_id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(product_id),
    image_url TEXT NOT NULL
);

üõí Cart & Wishlist

CREATE TABLE wishlist (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    product_id INTEGER REFERENCES products(product_id),
    is_public BOOLEAN DEFAULT FALSE,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE cart (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    product_id INTEGER REFERENCES products(product_id),
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

üì¶ Orders & Shipping

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    status VARCHAR(20) DEFAULT 'pending',
    total_price DECIMAL(10,2) NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(order_id),
    product_id INTEGER REFERENCES products(product_id),
    quantity INTEGER NOT NULL,
    price DECIMAL(10,2) NOT NULL
);

CREATE TABLE shipping_addresses (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    country VARCHAR(100) NOT NULL,
    city VARCHAR(100) NOT NULL,
    street VARCHAR(255) NOT NULL,
    postal_code VARCHAR(20) NOT NULL,
    is_default BOOLEAN DEFAULT FALSE
);

CREATE TABLE billing_addresses (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    country VARCHAR(100) NOT NULL,
    city VARCHAR(100) NOT NULL,
    street VARCHAR(255) NOT NULL,
    postal_code VARCHAR(20) NOT NULL,
    is_default BOOLEAN DEFAULT FALSE
);

üéÅ Gift Cards & Donations

CREATE TABLE gift_cards (
    gift_card_id SERIAL PRIMARY KEY,
    code VARCHAR(50) UNIQUE NOT NULL,
    sender_id INTEGER REFERENCES users(user_id),
    receiver_id INTEGER REFERENCES users(user_id) NULL,
    amount DECIMAL(10,2) NOT NULL,
    is_redeemed BOOLEAN DEFAULT FALSE,
    issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    redeemed_at TIMESTAMP NULL
);

CREATE TABLE donations (
    donation_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    amount DECIMAL(10,2) NOT NULL,
    donation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

üë• Community System (Groups & Events)

CREATE TABLE groups (
    group_id SERIAL PRIMARY KEY,
    brand_id INTEGER REFERENCES brands(brand_id),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_by INTEGER REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE events (
    event_id SERIAL PRIMARY KEY,
    brand_id INTEGER REFERENCES brands(brand_id) NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    event_date TIMESTAMP NOT NULL,
    created_by INTEGER REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

üí¨ Messaging System

CREATE TABLE conversations (
    conversation_id SERIAL PRIMARY KEY,
    is_group BOOLEAN DEFAULT FALSE,
    group_name VARCHAR(100) NULL,
    created_by INTEGER REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE messages (
    message_id SERIAL PRIMARY KEY,
    conversation_id INTEGER REFERENCES conversations(conversation_id),
    sender_id INTEGER REFERENCES users(user_id),
    content TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE message_reactions (
    reaction_id SERIAL PRIMARY KEY,
    message_id INTEGER REFERENCES messages(message_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(user_id),
    reaction VARCHAR(20) NOT NULL, -- e.g., "like", "love", "haha", "wow", "angry"
    reacted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE messages ADD COLUMN is_deleted BOOLEAN DEFAULT FALSE;

-- Function to allow users to "unsend" messages
CREATE FUNCTION unsend_message(msg_id INTEGER, user_id INTEGER) RETURNS TEXT AS $$
BEGIN
    UPDATE messages SET is_deleted = TRUE WHERE message_id = msg_id AND sender_id = user_id;
    RETURN 'Message successfully unsent!';
END;
$$ LANGUAGE plpgsql;

üì© Notifications System

CREATE TABLE notifications (
    notification_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    type VARCHAR(50) NOT NULL,
    content TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

üì¶ Subscription System

CREATE TABLE subscription_plans (
    plan_id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    base_price DECIMAL(10,2) NOT NULL,
    description TEXT,
    billing_cycle INTERVAL DEFAULT '1 month',
    multiplier_points DECIMAL(3,2) DEFAULT 1.5,
    is_active BOOLEAN DEFAULT TRUE
);

CREATE TABLE user_subscriptions (
    subscription_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    plan_id INTEGER REFERENCES subscription_plans(plan_id),
    duration_months INTEGER CHECK (duration_months IN (1, 3, 6, 12)),
    start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP GENERATED ALWAYS AS (start_date + (duration_months * INTERVAL '1 month')) STORED,
    is_active BOOLEAN DEFAULT TRUE
);
