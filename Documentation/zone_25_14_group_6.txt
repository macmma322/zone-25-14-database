-- ##########################################################
-- #              GROUP 6: COMMUNITY & ENGAGEMENT          #
-- #  Handles user groups, events, live streaming,        #
-- #  giveaways, and announcements.                       #
-- ##########################################################

-- User Groups Table (Community-Based Groups)
CREATE TABLE groups (
    group_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    group_name VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    created_by UUID REFERENCES users(user_id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Group Members Table
CREATE TABLE group_members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    group_id UUID REFERENCES groups(group_id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    role VARCHAR(20) CHECK (role IN ('admin', 'moderator', 'member')) DEFAULT 'member',
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Group Posts Table (For Group Discussions)
CREATE TABLE group_posts (
    post_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    group_id UUID REFERENCES groups(group_id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Events Table (Online & IRL Events)
CREATE TABLE events (
    event_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_name VARCHAR(255) NOT NULL,
    description TEXT,
    organizer_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    event_date TIMESTAMP NOT NULL,
    location TEXT NULL, -- Optional for IRL Events
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Event Participants Table
CREATE TABLE event_participants (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    event_id UUID REFERENCES events(event_id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Streamers Table (For Approved Streamers)
CREATE TABLE streamers (
    streamer_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    is_verified BOOLEAN DEFAULT FALSE
);

-- Streaming Platforms Table (Tracks Where Streamers Go Live)
CREATE TABLE streamer_platforms (
    platform_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    platform_name VARCHAR(100) UNIQUE NOT NULL
);

-- Stream Schedules Table (Upcoming Streams)
CREATE TABLE stream_schedules (
    stream_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    streamer_id UUID REFERENCES streamers(streamer_id) ON DELETE CASCADE,
    platform_id UUID REFERENCES streamer_platforms(platform_id) ON DELETE CASCADE,
    stream_title VARCHAR(255) NOT NULL,
    stream_url TEXT NOT NULL,
    scheduled_time TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Stream Followers Table (Users Who Follow Streamers)
CREATE TABLE stream_followers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    streamer_id UUID REFERENCES streamers(streamer_id) ON DELETE CASCADE,
    follower_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    followed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Giveaways Table (Raffles & Competitions)
CREATE TABLE giveaways (
    giveaway_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    organizer_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    giveaway_name VARCHAR(255) NOT NULL,
    description TEXT,
    max_winners INTEGER NOT NULL CHECK (max_winners > 0),
    winner_selection_method VARCHAR(20) CHECK (winner_selection_method IN ('first_come', 'random_draw')) DEFAULT 'random_draw',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Giveaway Entries Table
CREATE TABLE giveaway_entries (
    entry_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    giveaway_id UUID REFERENCES giveaways(giveaway_id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    entered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Giveaway Winners Table
CREATE TABLE giveaway_winners (
    winner_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    giveaway_id UUID REFERENCES giveaways(giveaway_id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    won_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Announcements Table (Platform-Wide Announcements)
CREATE TABLE announcements (
    announcement_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    author_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Reactions on Announcements
CREATE TABLE announcement_reactions (
    reaction_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    announcement_id UUID REFERENCES announcements(announcement_id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    reaction TEXT NOT NULL CHECK (reaction IN ('like', 'heart', 'haha', 'sad', 'angry')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
